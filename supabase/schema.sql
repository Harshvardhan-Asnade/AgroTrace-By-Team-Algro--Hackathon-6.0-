-- Create the produce_lots table
CREATE TABLE
  public.produce_lots (
    id TEXT NOT NULL,
    name TEXT NULL,
    origin TEXT NULL,
    "plantingDate" TIMESTAMP WITH TIME ZONE NULL,
    "harvestDate" TIMESTAMP WITH TIME ZONE NULL,
    "itemCount" INTEGER NULL,
    farmer JSONB NULL,
    certificates JSONB NULL,
    history JSONB NULL,
    CONSTRAINT produce_lots_pkey PRIMARY KEY (id)
  );

-- Create the feedback table
CREATE TABLE
  public.feedback (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT now() NOT NULL,
    lot_id TEXT NULL,
    feedback_text TEXT NULL,
    CONSTRAINT feedback_pkey PRIMARY KEY (id),
    CONSTRAINT feedback_lot_id_fkey FOREIGN KEY (lot_id) REFERENCES produce_lots (id) ON DELETE CASCADE
  );

-- Enable Row Level Security (RLS) for the tables
ALTER TABLE public.produce_lots ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.feedback ENABLE ROW LEVEL SECURITY;

-- Create policies for produce_lots
-- Allow public read access to everyone
CREATE POLICY "Allow public read access to produce lots" ON public.produce_lots FOR
SELECT
  USING (true);

-- Allow authenticated users to insert, update, and delete
CREATE POLICY "Allow authenticated users full access to produce lots" ON public.produce_lots FOR ALL USING (auth.role () = 'authenticated');

-- Create policies for feedback
-- Allow public read access to everyone
CREATE POLICY "Allow public read access to feedback" ON public.feedback FOR
SELECT
  USING (true);

-- Allow anyone to insert feedback
CREATE POLICY "Allow anyone to insert feedback" ON public.feedback FOR INSERT
WITH
  CHECK (true);
  
-- Grant usage on the public schema to the 'postgres' and 'anon' roles.
-- This is necessary for the schema cache reloading to work.
GRANT USAGE ON SCHEMA public TO postgres, anon;

-- Allow the 'anon' role (which the app uses for public access) to call the pgrst_watch function.
-- This is the function that forces the schema cache to reload.
GRANT EXECUTE ON FUNCTION public.pgrst_watch() TO anon;
